diff --git a/node_modules/@strapi/provider-upload-aws-s3/dist/index.js b/node_modules/@strapi/provider-upload-aws-s3/dist/index.js
index 6cec5cd..b8d4feb 100644
--- a/node_modules/@strapi/provider-upload-aws-s3/dist/index.js
+++ b/node_modules/@strapi/provider-upload-aws-s3/dist/index.js
@@ -3,7 +3,17 @@ const fp = require("lodash/fp");
 const clientS3 = require("@aws-sdk/client-s3");
 const s3RequestPresigner = require("@aws-sdk/s3-request-presigner");
 const libStorage = require("@aws-sdk/lib-storage");
+const Sharp = require('sharp');
 const ENDPOINT_PATTERN = /^(.+\.)?s3[.-]([a-z0-9-]+)\./;
+function isImage(file) {
+     const types = [".png", ".jpg", ".jpeg", ".gif"];
+      let isSupportedImage = false;
+      Object.values(types).forEach((type) => {
+        if (file.ext === type) isSupportedImage = true;
+        return isSupportedImage;
+      });
+      return isSupportedImage;
+ }
 function isUrlFromBucket(fileUrl, bucketName, baseUrl = "") {
   const url = new URL(fileUrl);
   if (baseUrl) {
@@ -95,18 +105,33 @@ const index = {
     const filePrefix = rootPath ? `${rootPath.replace(/\/+$/, "")}/` : "";
     const getFileKey = (file) => {
       const path = file.path ? `${file.path}/` : "";
-      return `${filePrefix}${path}${file.hash}${file.ext}`;
+      let fileExt = file.ext;
+      if (isImage(file)) {
+        const fileKey = `${filePrefix}${path}${file.hash}${file.ext}`
+        const isWebP = fileKey.includes('-webp');
+        const isAvif = fileKey.includes('-avif');
+        if (isWebP) fileExt = '.webp';
+        if (isAvif) fileExt = '.avif';
+      }
+      return `${filePrefix}${path}${file.hash}${fileExt}`;
     };
     const upload = async (file, customParams = {}) => {
+      let transformer = null;
+      const transformerWebP = Sharp().toFormat('webP');
+      const transformerAvif = Sharp().toFormat('avif');
       const fileKey = getFileKey(file);
+      const isWebP = fileKey.includes('-webp');
+      const isAvif = fileKey.includes('-avif');
+      if (isWebP) transformer = transformerWebP;
+      if (isAvif) transformer = transformerAvif;
       const uploadObj = new libStorage.Upload({
         client: s3Client,
         params: {
           Bucket: config.params.Bucket,
           Key: fileKey,
-          Body: file.stream || Buffer.from(file.buffer, "binary"),
+          Body: (isImage(file) && transformer) ? file.stream.pipe(transformer) : (file.stream || Buffer.from(file.buffer, 'binary')),
           ACL: config.params.ACL,
-          ContentType: file.mime,
+          ContentType: isImage(file) ? 'image/webp' : file.mime,
           ...customParams
         }
       });
